# -*- coding: utf-8 -*-
"""submission 1 machine learning terapan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14rEmW1c9MnQiiUovg4C9-EV5QJSwfhT0

# SUBMISSION 1 - Machine Learning Terapan SIB Dicoding Batch 3

---


## PREDIKSI GAGAL JANTUNG

**Nama : Rosyiidah Hasnaa**

**Study Group : M02**

### **Data Loading**
"""

#membaca dataset
import pandas as pd

hearts = pd.read_csv('heart.csv')
hearts.tail()

"""### **Data Exploratory**

"""

#mengenali jenis variabel pada heart dataset
hearts.info()

#mengetahui informasi statistik pada masing-masing kolom
hearts.describe()

#melakukan pengecekan apakah terdapat missing value dalam dataset
hearts.isnull().sum().sort_values(ascending=False)

"""Dari proses pengecekan missing value diatas, didapatkan bahwasanya tidak ada missing value dari dataset tersebut.

####**Univariate Exploratory Data Analysis**
Melihat Distribusi Fitur Fitur dalam hearts dataset

**1. Melihat distribusi fitur Sex dalam dataset**
"""

count=hearts["Sex"].value_counts()
print(count)
count.plot(kind='pie', title='Distribusi Jenis Kelamin Pada Dataset',autopct='%1.1f%%', figsize=(5,5));

"""**2. Melihat Distribusi Fitur ChestPainType(Jenis Nyeri Dada) pada dataset**"""

count= hearts["ChestPainType"].value_counts()
print(count)
count.plot(kind='pie', title='Distribusi Jenis Nyeri Dada Yang diderita',autopct='%1.1f%%', figsize=(5,5));

"""**3. Melihat Distribusi Fitur RestingECG pada dataset**"""

count= hearts["RestingECG"].value_counts()
print(count)
count.plot(kind='pie', title='Distribusi RestingECG',autopct='%1.1f%%', figsize=(5,5));

"""**4. Melihat Distribusi Fitur ST_Slope pada dataset**"""

count= hearts["ST_Slope"].value_counts()
print(count)
count.plot(kind='pie', title='Distribusi ST_Slope',autopct='%1.1f%%', figsize=(5,5));

"""**5. Melihat Distribusi Fitur Fitur Numerikal dalam Dataset**

Fitur numerikal meliputi Age,RestingBP,Cholesterol,FastingBS,MaxHR,Oldpeak dan targetnya yang berupa nilai numerik yaitu HeartDisease
"""

import matplotlib.pyplot as plt
import matplotlib 
matplotlib.style.use('ggplot')

hearts.hist(bins=50, figsize=(20,15))
plt.show()

"""###**Multivariate Exploratory Data Analysis**
Multivariate EDA menunjukkan hubungan antara dua atau lebih variabel pada data. Berfungsi untuk mengetahui hubungan antar fitur

**Memisahkan data kategorikal, data numerikal, dan target**
"""

#target
target="HeartDisease"

#data kategorikal
cat_features = hearts.select_dtypes(include='object').columns.to_list()

#data numerikal
num_features = hearts.drop([target],axis =1)
num_features = num_features.select_dtypes(include='number').columns.to_list()

print(cat_features)
print(num_features)
print(target)

"""**Melihat hubungan fitur kategorikal dengan target HeartDisease**"""

import seaborn as sns

for col in cat_features:
  sns.catplot(y="Age", x=col, hue=target, data=hearts, palette="inferno");
  plt.title("Hubungan antara gagal jantung terhadap - {}".format(col))
  print("\nPresentase hubungan antara gagal jantung terhadap - {}".format(col))
  percent = (100*hearts.groupby([col,target])[col].count()/hearts[col].count()).round(2)
  percent.columns = [col,target,'Pecent(%)']
  display(percent)

"""**Hubungan Fitur Numerikal dengan Penyakit Gagal Jantung**"""

sns.pairplot(hearts, hue=target, palette="inferno", corner=True);

"""**Pengecekan korelasi tiap fitur dengan target menggunakan fungsi corr yang tersedia pada library pandas.**"""

import plotly.express as px

correlation_matrix = hearts.corr().round(2)
px.imshow(correlation_matrix,title="Matriks Kolerasi Prediksi Gagal Jantung")

"""###**DATA PREPOCESSING**

**1. Encoding Fitur Kategori**
"""

from sklearn.preprocessing import  OneHotEncoder

for category in cat_features:
  hearts = pd.concat([hearts, pd.get_dummies(hearts[category], prefix=category)],axis=1)
  hearts.drop(category, axis=1, inplace=True)

hearts.head()

"""**2. Membagi dataset kedalam dataset dan data train**"""

from sklearn.model_selection import train_test_split
 
X = hearts.drop(["HeartDisease"],axis =1)
y = hearts["HeartDisease"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 123)

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""**3. Standarisasi Fitur Numerik**"""

from sklearn.preprocessing import StandardScaler
 
scaler = StandardScaler()
scaler.fit(X_train[num_features])
X_train[num_features] = scaler.transform(X_train.loc[:, num_features])
X_train[num_features].head()

X_train.head()

"""###**MODEL DEVELOPMENT**"""

#Logistic Regression
from sklearn.linear_model import LogisticRegression

logisticRegression=LogisticRegression()
logisticRegression.fit(X_train,y_train)

#naive bayes
from sklearn.naive_bayes import GaussianNB

naiveBayes=GaussianNB()
naiveBayes.fit(X_train,y_train)

#DTC
from sklearn.tree import DecisionTreeClassifier

dtc=DecisionTreeClassifier(criterion="entropy")
dtc.fit(X_train,y_train)

#RandomForest
from sklearn.ensemble import RandomForestClassifier

rf=RandomForestClassifier(n_estimators=200,criterion="entropy")
rf.fit(X_train,y_train)

#xbc
from xgboost import XGBClassifier

xbc=XGBClassifier()
xbc.fit(X_train,y_train)

"""###**EVALUASI MODEL**"""

#import matriks evaluasi yang akan digunakan
from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score

# Buat dataframe yang mengandung nilai matriks evaluasi masing-masing algoritma
clf = pd.DataFrame(columns=['Accuracy', 'Precision','Recall','F1-score'], 
                   index=['LogisticRegression','NaiveBayes','DecisionTree','RandomForest','XgBoost'])

# Buat dictionary untuk setiap algoritma yang digunakan
model_dict = {'LogisticRegression': logisticRegression, 'NaiveBayes': naiveBayes,
              'DecisionTree':dtc,'RandomForest':rf,'XgBoost':xbc }
 
# Hitung Matriks Evaluasi tiap algoritma
for name, model in model_dict.items():
    clf.loc[name, 'Accuracy'] = accuracy_score(y_test, y_pred=model.predict(X_test))
    clf.loc[name, 'Precision'] = precision_score(y_test, y_pred=model.predict(X_test))
    clf.loc[name, 'Recall'] = recall_score(y_test, y_pred=model.predict(X_test))
    clf.loc[name, 'F1-score'] = f1_score(y_test, y_pred=model.predict(X_test)) 
    
# Panggil clf
clf